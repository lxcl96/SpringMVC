<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置SpringMVC的前端控制器DispatcherServlet ，对浏览器发送的请求进行统一处理-->
    <!-- 默认配置方式就是不配置contextConfigLocation 参数 ，spring的配置文件名为 SpringMVC（即标签servlet-name的值）-servlet.xml放在WEB-INF目录下
        缺点 显而易见 配置文件不在 resources目录下。不利于统一管理
    -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 通过初始化参数  扩展配置方式-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- classpath:类路径  对应的就是 java 和resources路径-->
            <param-value>classpath:SpringMVC.xml</param-value>
        </init-param>

        <!-- 将spring框架初始化，即DispatchServlet在项目启动时初始化 否则是在第一次访问web工程时初始化 浪费客户的时间
            当值为 正数 表示启动项目时初始化
            当值为 负数或零  表示第一次访问时初始化  影响客户体验
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
<!--        让DispatcherServlet接收所有请求
            / 表示可以接收前端所有请求  除了jsp （如果是.jsp文件  是不行的需要单独配置）
            /* 表示可以接收前端的所有请求，包括jsp

            -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>



</web-app>