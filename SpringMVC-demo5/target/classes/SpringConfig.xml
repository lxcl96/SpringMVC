<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--    开启注解扫描-->
    <context:component-scan base-package="com.ly.mvc"></context:component-scan>

<!--    配置引擎模板-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>



<!--    开启视图控制器view-controller-->
    <mvc:view-controller path="/" view-name="index" status-code="200"></mvc:view-controller>

<!--    开启注解驱动，不然@ResquestMapping注解失效-->
    <mvc:annotation-driven />

<!--    使用默认servlet，开启静态资源访问-->
    <mvc:default-servlet-handler />

<!--    配置拦截器-->
    <!--  方法1：此时配置的拦截器，所有的请求都会被其接收处理（拦截/放行） 包括不存在的请求地址  -->
    <mvc:interceptors>
        <bean id="myInterceptor1" class="com.ly.mvc.interceptor.MyInterceptor1" ></bean>
        <bean id="myInterceptor" class="com.ly.mvc.interceptor.MyInterceptor" ></bean>
        <bean id="myInterceptor2" class="com.ly.mvc.interceptor.MyInterceptor2" ></bean>
    </mvc:interceptors>


    <!--  方法2：此时配置的拦截器，所有的请求都会被其接收处理（拦截/放行） 包括不存在的请求地址 【bean可以用xml 也可以用注解@component】 -->
<!--    <mvc:interceptors>-->
<!--        <ref bean="myInterceptor" />-->
<!--    </mvc:interceptors>-->

    <!--  方法3：此时配置的拦截器，对指定路径进行拦截  -->
<!--    <mvc:interceptors>-->
<!--        <mvc:interceptor>-->
<!--            &lt;!&ndash;    可配置多个拦截路径 多个放行路径   &ndash;&gt;-->
<!--            <mvc:mapping path="/**"/>  &lt;!&ndash; /* 仅拦截一层目录所有   多层目录/hah/test/../就匹配不到了  /**可以拦截所有请求&ndash;&gt;-->
<!--            <mvc:mapping path="/hah" /> &lt;!&ndash; 拦截/hah&ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/"/>  &lt;!&ndash; 放行 /&ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/testInterceptor"/>  &lt;!&ndash; 放行 /testInterceptor&ndash;&gt;-->
<!--&lt;!&ndash;            <bean class="com.ly.mvc.interceptor.MyInterceptor"></bean>&ndash;&gt;-->
<!--            <ref bean="myInterceptor"/>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->


</beans>